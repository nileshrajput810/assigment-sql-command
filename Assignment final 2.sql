use mavenmovies;

-- 1. **Rank the customers based on the total amount they've spent on rentals.**
SELECT 
    customer_id,
    COUNT(*) AS total_rental,
    RANK() OVER (ORDER BY COUNT(*) DESC) AS customer_rank
FROM rental
GROUP BY customer_id
ORDER BY total_rental DESC;

-- 2. **Calculate the cumulative revenue generated by each film over time.**
SELECT 
    film_id,
    rental_date,
    COUNT(*) OVER (PARTITION BY film_id ORDER BY rental_date ROWS UNBOUNDED PRECEDING) AS cumulative_rental
FROM rental
ORDER BY film_id, rental_date;

-- 3. **Determine the average rental duration for each film, considering films with similar lengths.**
WITH film_avg_durations AS (
    SELECT
        length,
        AVG(rental_duration) AS avg_rental_duration
    FROM films
    JOIN rental ON films.film_id = rental.film_id
    GROUP BY length
)
SELECT
    f.film_id,
    f.title,
    f.length,
    fad.avg_rental_duration
FROM films f
JOIN film_avg_durations fad ON f.length = fad.length;

-- 4. **Identify the top 3 films in each category based on their rental counts.**
WITH film_rental_counts AS (
    SELECT
        film_id,
        category_id,
        COUNT(*) AS rental_count,
        RANK() OVER (PARTITION BY category_id ORDER BY COUNT(*) DESC) AS film_rank
    FROM films
    JOIN rental ON films.film_id = rental.film_id
    GROUP BY film_id, category_id
)
SELECT 
    film_id,
    category_id,
    rental_count
FROM film_rental_counts
WHERE film_rank <= 3;

-- 5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.**
WITH customer_rental AS (
    SELECT
        customer_id,
        COUNT(*) AS total_rental
    FROM rental
    GROUP BY customer_id
),
average_rental AS (
    SELECT AVG(total_rental) AS avg_rental
    FROM customer_rental
)
SELECT 
    cr.customer_id,
    cr.total_rental,
    ar.avg_rental,
    (cr.total_rental - ar.avg_rental) AS rental_difference
FROM customer_rental cr
CROSS JOIN average_rental ar;

-- 6. **Find the monthly revenue trend for the entire rental store over time.**
SELECT 
    DATE_TRUNC('month', rental_date) AS month,
    COUNT(*) AS monthly_rental
FROM rental
GROUP BY DATE_TRUNC('month', rental_date)
ORDER BY month;

-- 7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**
WITH customer_rental AS (
    SELECT
        customer_id,
        COUNT(*) AS total_rental
    FROM rental
    GROUP BY customer_id
),
rental_threshold AS (
    SELECT
        PERCENTILE_CONT(0.80) WITHIN GROUP (ORDER BY total_rental) AS threshold
    FROM customer_rental
)
SELECT 
    cr.customer_id,
    cr.total_rental
FROM customer_rental cr
JOIN rental_threshold rt ON cr.total_rental >= rt.threshold;

-- 8. **Calculate the running total of rentals per category, ordered by rental count.**
SELECT 
    category_id,
    film_id,
    rental_count,
    SUM(rental_count) OVER (PARTITION BY category_id ORDER BY rental_count DESC ROWS UNBOUNDED PRECEDING) AS running_total
FROM (
    SELECT
        category_id,
        film_id,
        COUNT(*) AS rental_count
    FROM films
    JOIN rental ON films.film_id = rental.film_id
    GROUP BY category_id, film_id
) subquery
ORDER BY category_id, rental_count DESC;

-- 9. **Find the films that have been rented less than the average rental count for their respective categories.**
WITH category_avg_rentals AS (
    SELECT
        category_id,
        AVG(rental_count) AS avg_rental_count
    FROM (
        SELECT
            category_id,
            film_id,
            COUNT(*) AS rental_count
        FROM films
        JOIN rental ON films.film_id = rental.film_id
        GROUP BY category_id, film_id
    ) subquery
    GROUP BY category_id
)
SELECT
    f.film_id,
    f.title,
    c.name AS category_name,
    fr.rental_count,
    car.avg_rental_count
FROM films f
JOIN (
    SELECT
        film_id,
        category_id,
        COUNT(*) AS rental_count
    FROM rental
    GROUP BY film_id, category_id
) fr ON f.film_id = fr.film_id
JOIN categories c ON f.category_id = c.category_id
JOIN category_avg_rental car ON fr.category_id = car.category_id
WHERE fr.rental_count < car.avg_rental_count;

-- 10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**
WITH monthly_rentals AS (
    SELECT 
        DATE_TRUNC('month', rental_date) AS month,
        COUNT(*) AS rental_count
    FROM rental
    GROUP BY DATE_TRUNC('month', rental_date)
)
SELECT 
    month,
    rental_count
FROM monthly_rentals
ORDER BY rental_count DESC
LIMIT 5;